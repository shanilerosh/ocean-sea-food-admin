[{"/home/shanil/web/ocean-fish-admin/src/index.js":"1","/home/shanil/web/ocean-fish-admin/src/App.js":"2","/home/shanil/web/ocean-fish-admin/src/components/Header.js":"3","/home/shanil/web/ocean-fish-admin/src/components/Login.js":"4","/home/shanil/web/ocean-fish-admin/src/components/Customer.js":"5"},{"size":298,"mtime":1609930444135,"results":"6","hashOfConfig":"7"},{"size":969,"mtime":1609960098162,"results":"8","hashOfConfig":"7"},{"size":719,"mtime":1609939030341,"results":"9","hashOfConfig":"7"},{"size":3823,"mtime":1609959141566,"results":"10","hashOfConfig":"7"},{"size":5877,"mtime":1609966099982,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"6vtc8o",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"23","usedDeprecatedRules":"15"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/shanil/web/ocean-fish-admin/src/index.js",["26"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Popper from \"popper.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",["27","28"],"/home/shanil/web/ocean-fish-admin/src/App.js",[],"/home/shanil/web/ocean-fish-admin/src/components/Header.js",["29","30","31"],"import React from \"react\";\nimport { Form, FormControl, Nav, Navbar, Button } from \"react-bootstrap\";\n\nconst Header = () => {\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Ocean See Food</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">View Orders</Nav.Link>\n          <Nav.Link href=\"#item\">Item Management</Nav.Link>\n          <Nav.Link href=\"#user\">User Management</Nav.Link>\n          <Nav.Link href=\"#customer\">Customer Management</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","/home/shanil/web/ocean-fish-admin/src/components/Login.js",["32"],"import { Formik } from \"formik\";\nimport React from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport './styling/LoginStyling.css'\nimport * as yup from 'yup';\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\n\nconst loginSchema = yup.object({\n    username: yup.string().min(4).required(),\n    password: yup.string().min(6).required()\n});\n\n\nconst Login = () => {\n\n    const logInAdmin = (user) => {\n        axios.post('http://localhost:1234/api/v1/user/checkAdmin', user).\n            then(({ data }) => {\n                if (data.isDone) {\n                    toast(data.data, { type: 'success' });\n                } else {\n                    toast(data.data, { type: 'error' });\n                }\n            }).catch(err => {\n                toast(\"Error.Please Try again\", { type: 'error' });\n            })\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-4 m-auto\">\n                    <Formik\n                        initialValues={{ username: '', password: '' }}\n                        validationSchema={loginSchema}\n                        onSubmit={(value, action) => {\n                            console.log(value);\n                            logInAdmin(value);\n                            action.resetForm();\n                        }}\n                    >\n                        {(props) => (\n                            <Form className=\"p-5 border mt-5\">\n                                <h4 className=\"mb-4 text-center\">Welcome Admin,</h4>\n                                <Form.Group controlId=\"formBasicEmail\">\n                                    <Form.Label>User Name</Form.Label>\n                                    <Form.Control type=\"text\" className=\"form-control form-control-sm\" au\n                                        onChange={props.handleChange('username')}\n                                        value={props.values.username}\n                                        onBlur={props.handleBlur('username')}\n                                        autoComplete=\"off\"\n                                    />\n                                    <Form.Text className=\"text-danger\">\n                                        {props.touched.username && props.errors.username}\n                                    </Form.Text>\n                                </Form.Group>\n                                <Form.Group controlId=\"formBasicPassword\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control type=\"password\" className=\"form-control form-control-sm\"\n                                        onChange={props.handleChange('password')}\n                                        value={props.values.password}\n                                        onBlur={props.handleBlur('password')}\n                                        autoComplete=\"off\"\n                                    />\n                                    <Form.Text className=\"text-danger\">\n                                        {props.touched.password && props.errors.password}\n                                    </Form.Text>\n                                </Form.Group>\n                                <Button className=\"btn-sm mr-2\" variant=\"success\" type=\"submit\" onClick={props.handleSubmit}>\n                                    Submit\n                            </Button>\n                                <Button className=\"btn-sm\" variant=\"danger\" type=\"submit\" onClick={props.resetForm}>\n                                    Cancel\n                        </Button>\n                            </Form>\n                        )}\n                    </Formik>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;\n","/home/shanil/web/ocean-fish-admin/src/components/Customer.js",["33","34"],{"ruleId":"35","severity":1,"message":"36","line":5,"column":8,"nodeType":"37","messageId":"38","endLine":5,"endColumn":14},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"35","severity":1,"message":"43","line":2,"column":10,"nodeType":"37","messageId":"38","endLine":2,"endColumn":14},{"ruleId":"35","severity":1,"message":"44","line":2,"column":16,"nodeType":"37","messageId":"38","endLine":2,"endColumn":27},{"ruleId":"35","severity":1,"message":"45","line":2,"column":42,"nodeType":"37","messageId":"38","endLine":2,"endColumn":48},{"ruleId":"46","severity":1,"message":"47","line":19,"column":73,"nodeType":"48","messageId":"49","endLine":19,"endColumn":74,"fix":"50"},{"ruleId":"35","severity":1,"message":"51","line":11,"column":11,"nodeType":"37","messageId":"38","endLine":11,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":39,"column":38,"nodeType":"54","messageId":"55","endLine":39,"endColumn":40},"no-unused-vars","'Popper' is defined but never used.","Identifier","unusedVar","no-native-reassign",["56"],"no-negated-in-lhs",["57"],"'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"58","text":"59"},"'handleAdminSubmit' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",[501,515],"\n            ."]